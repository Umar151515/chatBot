from aiogram import F, Router
from aiogram.enums import ParseMode
from aiogram.types import Message, CallbackQuery

from core.managers import UserManager
from ..utils.messages import send_message, edit_message
from ..keyboards import main_settings, get_main_keyboard, get_text_models_keyboard, get_image_models_keyboard


router = Router()

@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings(message: Message):
    user = UserManager.get_user(message.from_user.id)

    settings_info = (
        "<b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
        "<b>–¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>\n"
        f"‚Ä¢ –ú–æ–¥–µ–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞: <code>{user.text_model}</code>\n"
        f"‚Ä¢ –ú–æ–¥–µ–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: <code>{user.image_model}</code>\n"
    )
    await send_message(message, settings_info, parse_mode=ParseMode.HTML, reply_markup=main_settings)

@router.message(F.text == "üåê –í—ã–∫–ª—é—á–∏—Ç—å –ø–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ ‚úÖ")
async def disable_web_search(message: Message):
    try:
        user = UserManager.get_user(message.from_user.id)
        user.web_search = False
        
        await send_message(message, "–ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –≤—ã–∫–ª—é—á–µ–Ω", reply_markup=get_main_keyboard(False))
    except Exception as e:
        await send_message(message, f"{e}\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª—é—á–∏—Ç—å –ø–æ–∏—Å–∫.", parse_mode=None)

@router.message(F.text == "üåê –í–∫–ª—é—á–∏—Ç—å –ø–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ ‚ùå")
async def enable_web_search(message: Message):
    try:
        user = UserManager.get_user(message.from_user.id)
        user.web_search = True

        await send_message(message, "–ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –≤–∫–ª—é—á—ë–Ω", reply_markup=get_main_keyboard(True))
    except Exception as e:
        await send_message(message, f"{e}\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–∫–ª—é—á–∏—Ç—å –ø–æ–∏—Å–∫.", parse_mode=None)


@router.callback_query(F.data == "text_models")
async def text_model(callback: CallbackQuery):
    try:
        user = UserManager.get_user(callback.from_user.id)
        await edit_message(callback.message, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—É—é –º–æ–¥–µ–ª—å", reply_markup=get_text_models_keyboard(user))
    except Exception as e:
        await edit_message(callback.message, f"{e}\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", None)

@router.callback_query(F.data == "image_models")
async def image_model(callback: CallbackQuery):
    try:
        user = UserManager.get_user(callback.from_user.id)
        await edit_message(callback.message, "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", 
                           reply_markup=get_image_models_keyboard(user))
    except Exception as e:
        await edit_message(callback.message, f"{e}\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", None)
    
@router.callback_query(F.data.startswith("select_text_model_"))
async def handle_text_model_selection(callback: CallbackQuery):
    try:
        selected_model = callback.data.replace("select_text_model_", "")
        await edit_message(callback.message, f"–í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {selected_model}")

        user = UserManager.get_user(callback.from_user.id)
        user.text_model = selected_model

        UserManager.save()
    except Exception as e:
        await edit_message(callback.message, f"{e}\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", None)
    
@router.callback_query(F.data.startswith("select_image_model_"))
async def handle_image_model_selection(callback: CallbackQuery):
    try:
        selected_model = callback.data.replace("select_image_model_", "")
        await edit_message(callback.message, f"–í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {selected_model}")

        user = UserManager.get_user(callback.from_user.id)
        user.image_model = selected_model

        UserManager.save()
    except Exception as e:
        await edit_message(callback.message, f"{e}\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", None)